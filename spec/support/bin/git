#!/usr/bin/env node

var spawn = require('child_process').spawn;
var path = require('path');
var fs = require('../../../lib/utils/fs');
var wrench = require('wrench');
var _ = require('underscore');

var args = process.argv.slice(2);

var command = _.first(args);

var copyRepo = function(from, to) {
  wrench.mkdirSyncRecursive(path.dirname(to));
  // -T is required because 'to' directory may be already created
  spawn('cp', ['-Tr', from, to]);
};

var REAL_GIT = process.env._METEORITE_REAL_GIT;
if (!REAL_GIT) {
  console.error('No _METEORITE_REAL_GIT specified');
  process.exit(1);
}

if (command === 'clone') {
  var cachePath = path.join(__dirname, '..', 'cache');

  if (!fs.existsSync(cachePath))
    wrench.mkdirSyncRecursive(cachePath);

  var destPath = args.pop();
  var repoUrl = args.pop();
  var repoParts = repoUrl.replace('.git', '').split('/');
  var repoName = repoParts.pop();
  var repoUser = repoParts.pop();
  var repoCachePath = path.join(cachePath, repoUser, repoName);

  if (!fs.existsSync(repoCachePath)) {
    args.push(repoUrl);
    args.push(repoCachePath);
    var git = spawn(REAL_GIT, args);

    git.on('exit', function() {
      copyRepo(repoCachePath, destPath);
    });

  } else {
    copyRepo(repoCachePath, destPath);
  }


} else if (command !== 'pull') { // we will skip pulls, expensive and redudant.
  
  var git = spawn(REAL_GIT, args);

  git.stderr.pipe(process.stderr);
  git.stdout.pipe(process.stdout);
}
